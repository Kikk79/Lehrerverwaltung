(()=>{"use strict";var e={157:e=>{e.exports=require("electron")},238:function(e,t,s){var a,n=this&&this.__createBinding||(Object.create?function(e,t,s,a){void 0===a&&(a=s);var n=Object.getOwnPropertyDescriptor(t,s);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[s]}}),Object.defineProperty(e,a,n)}:function(e,t,s,a){void 0===a&&(a=s),e[a]=t[s]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||(a=function(e){return a=Object.getOwnPropertyNames||function(e){var t=[];for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[t.length]=s);return t},a(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s=a(e),r=0;r<s.length;r++)"default"!==s[r]&&n(t,e,s[r]);return i(t,e),t});Object.defineProperty(t,"__esModule",{value:!0});const d=s(157),c=r(s(928)),o=s(322);new class{constructor(){this.mainWindow=null,this.init()}init(){d.app.whenReady().then(()=>{this.databaseHandler=new o.MainDatabaseHandler,this.createWindow(),this.registerIpcHandlers()}),d.app.on("window-all-closed",()=>{"darwin"!==process.platform&&(this.databaseHandler?.close(),d.app.quit())}),d.app.on("activate",()=>{0===d.BrowserWindow.getAllWindows().length&&this.createWindow()})}createWindow(){this.mainWindow=new d.BrowserWindow({width:1400,height:900,minWidth:1e3,minHeight:700,webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:c.join(__dirname,"preload.js"),webSecurity:!0},icon:c.join(__dirname,"../../assets/icon.png"),titleBarStyle:"default",show:!1}),this.mainWindow.loadFile(c.join(__dirname,"../renderer/index.html")),this.mainWindow.once("ready-to-show",()=>{this.mainWindow?.show()}),this.mainWindow.on("closed",()=>{this.mainWindow=null})}registerIpcHandlers(){d.ipcMain.handle("app:getVersion",()=>d.app.getVersion()),d.ipcMain.handle("app:getPlatform",()=>process.platform),d.ipcMain.handle("app:quit",()=>{d.app.quit()})}}},322:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MainDatabaseHandler=void 0;const a=s(656),n=s(157);t.MainDatabaseHandler=class{constructor(){this.dbService=a.DatabaseService.getInstance(),this.setupIpcHandlers()}setupIpcHandlers(){n.ipcMain.handle("db:createTeacher",async(e,t)=>this.dbService.createTeacher(t)),n.ipcMain.handle("db:getTeacher",async(e,t)=>this.dbService.getTeacher(t)),n.ipcMain.handle("db:getAllTeachers",async()=>this.dbService.getAllTeachers()),n.ipcMain.handle("db:updateTeacher",async(e,t,s)=>this.dbService.updateTeacher(t,s)),n.ipcMain.handle("db:deleteTeacher",async(e,t)=>this.dbService.deleteTeacher(t)),n.ipcMain.handle("db:createCourse",async(e,t)=>this.dbService.createCourse(t)),n.ipcMain.handle("db:getCourse",async(e,t)=>this.dbService.getCourse(t)),n.ipcMain.handle("db:getAllCourses",async()=>this.dbService.getAllCourses()),n.ipcMain.handle("db:updateCourse",async(e,t,s)=>this.dbService.updateCourse(t,s)),n.ipcMain.handle("db:deleteCourse",async(e,t)=>this.dbService.deleteCourse(t)),n.ipcMain.handle("db:createAssignment",async(e,t)=>this.dbService.createAssignment(t)),n.ipcMain.handle("db:getAssignment",async(e,t)=>this.dbService.getAssignment(t)),n.ipcMain.handle("db:getAllAssignments",async()=>this.dbService.getAllAssignments()),n.ipcMain.handle("db:updateAssignment",async(e,t,s)=>this.dbService.updateAssignment(t,s)),n.ipcMain.handle("db:deleteAssignment",async(e,t)=>this.dbService.deleteAssignment(t)),n.ipcMain.handle("db:getSetting",async(e,t)=>this.dbService.getSetting(t)),n.ipcMain.handle("db:setSetting",async(e,t,s)=>this.dbService.setSetting(t,s)),n.ipcMain.handle("db:getAllSettings",async()=>this.dbService.getAllSettings()),n.ipcMain.handle("db:getStats",async()=>this.dbService.getStats())}getDatabaseService(){return this.dbService}close(){this.dbService.close()}}},550:e=>{e.exports=require("better-sqlite3")},656:function(e,t,s){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DatabaseService=void 0;const n=a(s(550)),i=a(s(928)),r=a(s(896));class d{constructor(e){const t=e||i.default.join(process.cwd(),"database","teacher-assignment.db"),s=i.default.dirname(t);r.default.existsSync(s)||r.default.mkdirSync(s,{recursive:!0}),this.db=new n.default(t),this.initializeDatabase()}static getInstance(e){return d.instance||(d.instance=new d(e)),d.instance}initializeDatabase(){try{const e=i.default.join(process.cwd(),"database","schema.sql");if(!r.default.existsSync(e))throw new Error("Schema file not found");{const t=r.default.readFileSync(e,"utf8");this.db.exec(t),console.log("Database initialized successfully")}}catch(e){throw console.error("Failed to initialize database:",e),e}}createTeacher(e){const t=this.db.prepare("\n      INSERT INTO teachers (name, skills, working_times)\n      VALUES (?, ?, ?)\n    ").run(e.name,JSON.stringify(e.skills),JSON.stringify(e.working_times));return this.getTeacher(t.lastInsertRowid)}getTeacher(e){const t=this.db.prepare("SELECT * FROM teachers WHERE id = ?").get(e);return t?{id:t.id,name:t.name,skills:JSON.parse(t.skills),working_times:JSON.parse(t.working_times||"{}"),created_at:t.created_at}:null}getAllTeachers(){return this.db.prepare("SELECT * FROM teachers ORDER BY name").all().map(e=>({id:e.id,name:e.name,skills:JSON.parse(e.skills),working_times:JSON.parse(e.working_times||"{}"),created_at:e.created_at}))}updateTeacher(e,t){const s=this.getTeacher(e);return s?(this.db.prepare("\n      UPDATE teachers \n      SET name = ?, skills = ?, working_times = ?\n      WHERE id = ?\n    ").run(t.name??s.name,JSON.stringify(t.skills??s.skills),JSON.stringify(t.working_times??s.working_times),e),this.getTeacher(e)):null}deleteTeacher(e){return this.db.prepare("DELETE FROM teachers WHERE id = ?").run(e).changes>0}createCourse(e){const t=this.db.prepare("\n      INSERT INTO courses (topic, lessons_count, lesson_duration, start_date, end_date)\n      VALUES (?, ?, ?, ?, ?)\n    ").run(e.topic,e.lessons_count,e.lesson_duration,e.start_date,e.end_date);return this.getCourse(t.lastInsertRowid)}getCourse(e){const t=this.db.prepare("SELECT * FROM courses WHERE id = ?").get(e);return t?{id:t.id,topic:t.topic,lessons_count:t.lessons_count,lesson_duration:t.lesson_duration,start_date:t.start_date,end_date:t.end_date,created_at:t.created_at}:null}getAllCourses(){return this.db.prepare("SELECT * FROM courses ORDER BY start_date").all().map(e=>({id:e.id,topic:e.topic,lessons_count:e.lessons_count,lesson_duration:e.lesson_duration,start_date:e.start_date,end_date:e.end_date,created_at:e.created_at}))}updateCourse(e,t){const s=this.getCourse(e);return s?(this.db.prepare("\n      UPDATE courses \n      SET topic = ?, lessons_count = ?, lesson_duration = ?, start_date = ?, end_date = ?\n      WHERE id = ?\n    ").run(t.topic??s.topic,t.lessons_count??s.lessons_count,t.lesson_duration??s.lesson_duration,t.start_date??s.start_date,t.end_date??s.end_date,e),this.getCourse(e)):null}deleteCourse(e){return this.db.prepare("DELETE FROM courses WHERE id = ?").run(e).changes>0}createAssignment(e){const t=this.db.prepare("\n      INSERT INTO assignments (teacher_id, course_id, scheduled_slots, status, ai_rationale)\n      VALUES (?, ?, ?, ?, ?)\n    ").run(e.teacher_id,e.course_id,JSON.stringify(e.scheduled_slots||[]),e.status||"active",e.ai_rationale||null);return this.getAssignment(t.lastInsertRowid)}getAssignment(e){const t=this.db.prepare("\n      SELECT a.*, t.name as teacher_name, c.topic as course_topic\n      FROM assignments a\n      LEFT JOIN teachers t ON a.teacher_id = t.id\n      LEFT JOIN courses c ON a.course_id = c.id\n      WHERE a.id = ?\n    ").get(e);return t?{id:t.id,teacher_id:t.teacher_id,course_id:t.course_id,scheduled_slots:JSON.parse(t.scheduled_slots||"[]"),status:t.status,ai_rationale:t.ai_rationale,created_at:t.created_at}:null}getAllAssignments(){return this.db.prepare("\n      SELECT a.*, t.name as teacher_name, c.topic as course_topic\n      FROM assignments a\n      LEFT JOIN teachers t ON a.teacher_id = t.id\n      LEFT JOIN courses c ON a.course_id = c.id\n      ORDER BY a.created_at DESC\n    ").all().map(e=>({id:e.id,teacher_id:e.teacher_id,course_id:e.course_id,scheduled_slots:JSON.parse(e.scheduled_slots||"[]"),status:e.status,ai_rationale:e.ai_rationale,created_at:e.created_at}))}updateAssignment(e,t){const s=this.getAssignment(e);return s?(this.db.prepare("\n      UPDATE assignments \n      SET teacher_id = ?, course_id = ?, scheduled_slots = ?, status = ?, ai_rationale = ?\n      WHERE id = ?\n    ").run(t.teacher_id??s.teacher_id,t.course_id??s.course_id,JSON.stringify(t.scheduled_slots??s.scheduled_slots),t.status??s.status,t.ai_rationale??s.ai_rationale,e),this.getAssignment(e)):null}deleteAssignment(e){return this.db.prepare("DELETE FROM assignments WHERE id = ?").run(e).changes>0}getSetting(e){const t=this.db.prepare("SELECT value FROM app_settings WHERE key = ?").get(e);return t?t.value:null}setSetting(e,t){this.db.prepare("\n      INSERT OR REPLACE INTO app_settings (key, value)\n      VALUES (?, ?)\n    ").run(e,t)}getAllSettings(){const e=this.db.prepare("SELECT key, value FROM app_settings").all(),t={};return e.forEach(e=>{t[e.key]=e.value}),t}execute(e,t){const s=this.db.prepare(e);return t?s.run(...t):s.run()}close(){this.db&&this.db.close()}getStats(){const e=this.db.prepare("SELECT COUNT(*) as count FROM teachers").get(),t=this.db.prepare("SELECT COUNT(*) as count FROM courses").get(),s=this.db.prepare("SELECT COUNT(*) as count FROM assignments").get();return{teachers:e.count,courses:t.count,assignments:s.count}}}t.DatabaseService=d},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},t={};!function s(a){var n=t[a];if(void 0!==n)return n.exports;var i=t[a]={exports:{}};return e[a].call(i.exports,i,i.exports,s),i.exports}(238)})();