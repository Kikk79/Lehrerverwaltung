(()=>{"use strict";var e={157:e=>{e.exports=require("electron")},238:function(e,t,i){var s,n=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,n)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[t.length]=i);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i=s(e),r=0;r<i.length;r++)"default"!==i[r]&&n(t,e,i[r]);return a(t,e),t});Object.defineProperty(t,"__esModule",{value:!0});const c=i(157),o=r(i(928)),l=i(322);new class{constructor(){this.mainWindow=null,this.init()}init(){c.app.whenReady().then(()=>{this.databaseHandler=new l.MainDatabaseHandler,this.createWindow(),this.registerIpcHandlers()}),c.app.on("window-all-closed",()=>{"darwin"!==process.platform&&(this.databaseHandler?.close(),c.app.quit())}),c.app.on("activate",()=>{0===c.BrowserWindow.getAllWindows().length&&this.createWindow()})}createWindow(){this.mainWindow=new c.BrowserWindow({width:1400,height:900,minWidth:1e3,minHeight:700,webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:o.join(__dirname,"preload.js"),webSecurity:!0},icon:o.join(__dirname,"../../assets/icon.png"),titleBarStyle:"default",show:!1}),this.mainWindow.loadFile(o.join(__dirname,"../renderer/index.html")),this.mainWindow.once("ready-to-show",()=>{this.mainWindow?.show()}),this.mainWindow.on("closed",()=>{this.mainWindow=null})}registerIpcHandlers(){c.ipcMain.handle("app:getVersion",()=>c.app.getVersion()),c.ipcMain.handle("app:getPlatform",()=>process.platform),c.ipcMain.handle("app:quit",()=>{c.app.quit()})}}},322:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MainDatabaseHandler=void 0;const s=i(656),n=i(652),a=i(157);t.MainDatabaseHandler=class{constructor(){this.dbService=s.DatabaseService.getInstance(),this.assignmentService=new n.AssignmentService(this.dbService),this.setupIpcHandlers()}setupIpcHandlers(){a.ipcMain.handle("db:createTeacher",async(e,t)=>this.dbService.createTeacher(t)),a.ipcMain.handle("db:getTeacher",async(e,t)=>this.dbService.getTeacher(t)),a.ipcMain.handle("db:getAllTeachers",async()=>this.dbService.getAllTeachers()),a.ipcMain.handle("db:updateTeacher",async(e,t,i)=>this.dbService.updateTeacher(t,i)),a.ipcMain.handle("db:deleteTeacher",async(e,t)=>this.dbService.deleteTeacher(t)),a.ipcMain.handle("db:createCourse",async(e,t)=>this.dbService.createCourse(t)),a.ipcMain.handle("db:getCourse",async(e,t)=>this.dbService.getCourse(t)),a.ipcMain.handle("db:getAllCourses",async()=>this.dbService.getAllCourses()),a.ipcMain.handle("db:updateCourse",async(e,t,i)=>this.dbService.updateCourse(t,i)),a.ipcMain.handle("db:deleteCourse",async(e,t)=>this.dbService.deleteCourse(t)),a.ipcMain.handle("db:createAssignment",async(e,t)=>this.dbService.createAssignment(t)),a.ipcMain.handle("db:getAssignment",async(e,t)=>this.dbService.getAssignment(t)),a.ipcMain.handle("db:getAllAssignments",async()=>this.dbService.getAllAssignments()),a.ipcMain.handle("db:updateAssignment",async(e,t,i)=>this.dbService.updateAssignment(t,i)),a.ipcMain.handle("db:deleteAssignment",async(e,t)=>this.dbService.deleteAssignment(t)),a.ipcMain.handle("db:getSetting",async(e,t)=>this.dbService.getSetting(t)),a.ipcMain.handle("db:setSetting",async(e,t,i)=>this.dbService.setSetting(t,i)),a.ipcMain.handle("db:getAllSettings",async()=>this.dbService.getAllSettings()),a.ipcMain.handle("db:getStats",async()=>this.dbService.getStats()),a.ipcMain.handle("assignment:generate",async(e,t,i)=>this.assignmentService.generateAssignments(t,i)),a.ipcMain.handle("assignment:getQualificationMatches",async()=>{const e=this.dbService.getAllTeachers(),t=this.dbService.getAllCourses();return this.assignmentService.getQualificationMatches(t,e)})}getDatabaseService(){return this.dbService}close(){this.dbService.close()}}},550:e=>{e.exports=require("better-sqlite3")},652:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AssignmentService=void 0;const s=i(656);t.AssignmentService=class{constructor(e){this.dbService=e||s.DatabaseService.getInstance()}findQualifiedTeachers(e,t){return t.filter(t=>t.qualifications.includes(e.topic))}getQualificationMatches(e,t){const i=[];return e.forEach(e=>{this.findQualifiedTeachers(e,t).forEach(t=>{i.push({teacher:t,course:e})})}),i}createCostMatrix(e,t,i){const s=[];return e.forEach((e,n)=>{s[n]=[],t.forEach((t,a)=>{let r=e.qualifications.includes(t.topic)?0:1e3;r<1e3&&(r+=this.calculateWorkloadPenalty(e,t,i.equality)-this.calculateContinuityBonus(e,t,i.continuity)-this.calculateLoyaltyBonus(e,t,i.loyalty)),s[n][a]=Math.max(0,r)})}),s}solveHungarianAssignment(e,t,i){const s=this.createCostMatrix(e,t,i);return this.hungarianAlgorithm(s)}hungarianAlgorithm(e){const t=e.length,i=e[0]?.length||0;if(0===t||0===i)return[];const s=[],n=new Set,a=new Set,r=[];for(let s=0;s<t;s++)for(let t=0;t<i;t++)r.push({teacherId:s,courseId:t,cost:e[s][t]});return r.sort((e,t)=>e.cost-t.cost),r.forEach(e=>{!n.has(e.teacherId)&&!a.has(e.courseId)&&e.cost<1e3&&(s.push({teacherIndex:e.teacherId,courseIndex:e.courseId}),n.add(e.teacherId),a.add(e.courseId))}),s}detectTimeConflicts(e){const t=[],i=new Map;return e.forEach(e=>{i.has(e.teacher_id)||i.set(e.teacher_id,[]),i.get(e.teacher_id).push(...e.scheduled_slots)}),i.forEach((i,s)=>{const n=i.sort((e,t)=>new Date(`${e.date} ${e.start_time}`).getTime()-new Date(`${t.date} ${t.start_time}`).getTime());for(let i=0;i<n.length-1;i++){const a=n[i],r=n[i+1];this.slotsOverlap(a,r)&&t.push({type:"time_overlap",description:`Teacher ${s} has overlapping time slots: ${a.date} ${a.start_time}-${a.end_time} and ${r.date} ${r.start_time}-${r.end_time}`,severity:"critical",affected_assignments:e.filter(e=>e.teacher_id===s&&(e.scheduled_slots.includes(a)||e.scheduled_slots.includes(r))).map(e=>e.id)})}}),t}slotsOverlap(e,t){if(e.date!==t.date)return!1;const i=this.timeStringToMinutes(e.start_time),s=this.timeStringToMinutes(e.end_time),n=this.timeStringToMinutes(t.start_time);return i<this.timeStringToMinutes(t.end_time)&&n<s}timeStringToMinutes(e){const[t,i]=e.split(":").map(Number);return 60*t+i}checkTeacherAvailability(e,t){const i=this.getDayNameFromDate(t.date),s=e.working_times[i];if(!s)return!1;const n=this.timeStringToMinutes(t.start_time),a=this.timeStringToMinutes(t.end_time),r=this.timeStringToMinutes(s.start),c=this.timeStringToMinutes(s.end);return n>=r&&a<=c}getDayNameFromDate(e){return["sunday","monday","tuesday","wednesday","thursday","friday","saturday"][new Date(e).getDay()]}calculateWorkloadPenalty(e,t,i){const s=this.dbService.getAllAssignments().filter(t=>t.teacher_id===e.id&&"active"===t.status).reduce((e,t)=>e+t.scheduled_slots.reduce((e,t)=>e+t.duration_minutes,0),0)+t.lessons_count*t.lesson_duration,n=this.calculateAverageWorkload();return Math.abs(s-n)/n*100*(i/100)}calculateContinuityBonus(e,t,i){const s=this.dbService.getAllAssignments().filter(t=>t.teacher_id===e.id&&"active"===t.status);let n=0;return s.forEach(e=>{const i=this.dbService.getCourse(e.course_id);i&&i.topic===t.topic&&(n+=10)}),n*(i/100)}calculateLoyaltyBonus(e,t,i){const s=this.dbService.getAllAssignments().filter(t=>t.teacher_id===e.id);let n=0;return s.forEach(e=>{const i=this.dbService.getCourse(e.course_id);i&&i.topic===t.topic&&(n+=15)}),n*(i/100)}calculateAverageWorkload(){const e=this.dbService.getAllTeachers(),t=this.dbService.getAllAssignments().filter(e=>"active"===e.status);return 0===e.length?0:t.reduce((e,t)=>e+t.scheduled_slots.reduce((e,t)=>e+t.duration_minutes,0),0)/e.length}scoreAssignment(e,t,i){const s=this.calculateEqualityScore(e,t),n=this.calculateContinuityScore(e,t),a=this.calculateLoyaltyScore(e,t),r=s*i.equality/100+n*i.continuity/100+a*i.loyalty/100;return Math.max(0,Math.min(100,r))}calculateEqualityScore(e,t){const i=this.calculateAverageWorkload(),s=this.getCurrentTeacherWorkload(e.id)+t.lessons_count*t.lesson_duration,n=Math.abs(s-i),a=i;return Math.max(0,100-n/a*100)}calculateContinuityScore(e,t){let i=50;return this.dbService.getAllAssignments().filter(t=>t.teacher_id===e.id&&"active"===t.status).forEach(e=>{const s=this.dbService.getCourse(e.course_id);s&&s.topic===t.topic&&(i+=25)}),Math.min(100,i)}calculateLoyaltyScore(e,t){let i=50;const s=this.dbService.getAllAssignments().filter(t=>t.teacher_id===e.id).filter(e=>{const i=this.dbService.getCourse(e.course_id);return i&&i.topic===t.topic}).length;return i+=Math.min(50,10*s),Math.min(100,i)}getCurrentTeacherWorkload(e){return this.dbService.getAllAssignments().filter(t=>t.teacher_id===e&&"active"===t.status).reduce((e,t)=>e+t.scheduled_slots.reduce((e,t)=>e+t.duration_minutes,0),0)}async generateAssignments(e={equality:33,continuity:33,loyalty:34},t){try{const t=this.dbService.getAllTeachers(),i=this.dbService.getAllCourses();if(0===t.length||0===i.length)throw new Error("No teachers or courses available for assignment");if(0===this.getQualificationMatches(i,t).length)throw new Error("No qualified teachers found for any courses");const s=this.solveHungarianAssignment(t,i,e),n=[];for(const a of s){const s=t[a.teacherIndex],r=i[a.courseIndex],c={teacher_id:s.id,course_id:r.id,scheduled_slots:this.generateTimeSlots(r,s),status:"pending",ai_rationale:`Assigned based on qualification match and optimization weights (Equality: ${e.equality}%, Continuity: ${e.continuity}%, Loyalty: ${e.loyalty}%)`},o=this.validateAssignment(s,r,c.scheduled_slots),l=this.scoreAssignment(s,r,e);n.push({teacher:s,course:r,assignment:{...c,id:0,created_at:(new Date).toISOString()},conflicts:o.length>0?o:void 0,score:l})}return n}catch(e){throw console.error("Error generating assignments:",e),e}}generateTimeSlots(e,t){const i=[],s=new Date(e.start_date),n=new Date(e.end_date),a=Math.ceil((n.getTime()-s.getTime())/864e5);Math.ceil(e.lessons_count/(a/7));let r=new Date(s),c=0;for(;c<e.lessons_count&&r<=n;){const s=this.getDayNameFromDate(r.toISOString().split("T")[0]),n=t.working_times[s];n&&c<e.lessons_count&&(i.push({date:r.toISOString().split("T")[0],start_time:n.start,end_time:this.addMinutesToTime(n.start,e.lesson_duration),duration_minutes:e.lesson_duration}),c++),r.setDate(r.getDate()+1)}return i}addMinutesToTime(e,t){const i=this.timeStringToMinutes(e)+t,s=i%60;return`${Math.floor(i/60).toString().padStart(2,"0")}:${s.toString().padStart(2,"0")}`}validateAssignment(e,t,i){const s=[];return e.qualifications.includes(t.topic)||s.push({type:"qualification_mismatch",description:`Teacher ${e.name} does not have required qualification: ${t.topic}`,severity:"critical",affected_assignments:[]}),i.forEach(t=>{this.checkTeacherAvailability(e,t)||s.push({type:"availability_conflict",description:`Teacher ${e.name} is not available on ${t.date} from ${t.start_time} to ${t.end_time}`,severity:"high",affected_assignments:[]})}),s}validateAssignments(e){const t=[],i=e.map(e=>e.assignment),s=this.detectTimeConflicts(i);return t.push(...s),e.forEach(e=>{e.conflicts&&t.push(...e.conflicts)}),t}resolveConflicts(e,t){const i=[];return this.validateAssignments(e),e.forEach(e=>{if(!e.conflicts||0===e.conflicts.length)return void i.push(e);let s={...e};e.conflicts.forEach(e=>{switch(e.type){case"time_overlap":s=this.resolveTimeOverlapConflict(s,t);break;case"availability_conflict":s=this.resolveAvailabilityConflict(s);break;case"workload_exceeded":s=this.resolveWorkloadConflict(s,t)}}),i.push(s)}),i}resolveTimeOverlapConflict(e,t){const i=this.generateTimeSlots(e.course,e.teacher),s=this.validateAssignment(e.teacher,e.course,i);return{...e,assignment:{...e.assignment,scheduled_slots:i,ai_rationale:`Rescheduled to resolve time conflicts. ${e.assignment.ai_rationale}`},conflicts:s.length>0?s:void 0,score:this.scoreAssignment(e.teacher,e.course,t)}}resolveAvailabilityConflict(e){return{...e,assignment:{...e.assignment,status:"pending",ai_rationale:`Availability conflict detected - manual resolution required. ${e.assignment.ai_rationale}`}}}resolveWorkloadConflict(e,t){return{...e,assignment:{...e.assignment,status:"pending",ai_rationale:`Workload imbalance detected - consider reassigning. ${e.assignment.ai_rationale}`}}}generateFallbackAssignments(e,t,i){const s=[];return e.forEach(e=>{const n=this.findPartialQualificationMatches(e,t);if(n.length>0){const t=n[0],a={teacher_id:t.id,course_id:e.id,scheduled_slots:this.generateTimeSlots(e,t),status:"pending",ai_rationale:"Fallback assignment - closest qualification match. Manual review recommended."};s.push({teacher:t,course:e,assignment:{...a,id:0,created_at:(new Date).toISOString()},conflicts:this.validateAssignment(t,e,a.scheduled_slots),score:.5*this.scoreAssignment(t,e,i)})}}),s}findPartialQualificationMatches(e,t){return t.filter(t=>{const i=e.topic.toLowerCase().split(" ");return t.qualifications.some(e=>i.some(t=>e.toLowerCase().includes(t)&&t.length>2))}).sort((t,i)=>{const s=this.countQualificationMatches(e.topic,t.qualifications);return this.countQualificationMatches(e.topic,i.qualifications)-s})}countQualificationMatches(e,t){const i=e.toLowerCase().split(" ");let s=0;return t.forEach(e=>{i.forEach(t=>{e.toLowerCase().includes(t)&&t.length>2&&s++})}),s}getWorkloadStatistics(){const e=this.dbService.getAllTeachers(),t=this.dbService.getAllAssignments().filter(e=>"active"===e.status);return e.map(e=>{const i=t.filter(t=>t.teacher_id===e.id),s=i.reduce((e,t)=>e+t.scheduled_slots.length,0),n=i.reduce((e,t)=>e+t.scheduled_slots.reduce((e,t)=>e+t.duration_minutes,0),0)/60;return{teacherId:e.id,totalLessons:s,totalHours:n,assignmentCount:i.length}})}getAssignmentRecommendations(e){const t=this.getWorkloadStatistics(),i=[];if(0===t.length)return i;const s=t.reduce((e,t)=>e+t.totalHours,0)/t.length,n=t.filter(e=>e.totalHours>1.5*s);n.length>0&&i.push(`${n.length} teacher(s) are significantly overloaded. Consider redistributing assignments.`);const a=t.filter(e=>e.totalHours<.5*s);return a.length>0&&i.push(`${a.length} teacher(s) are underutilized. Consider assigning more courses.`),e.equality>70&&i.push("High equality weighting detected. Focus on balancing workload distribution."),e.continuity>70&&i.push("High continuity weighting detected. Prioritizing consecutive lesson scheduling."),e.loyalty>70&&i.push("High loyalty weighting detected. Maintaining teacher-subject relationships."),i}}},656:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DatabaseService=void 0;const n=s(i(550)),a=s(i(928)),r=s(i(896));class c{constructor(e){const t=e||a.default.join(process.cwd(),"database","teacher-assignment.db"),i=a.default.dirname(t);r.default.existsSync(i)||r.default.mkdirSync(i,{recursive:!0}),this.db=new n.default(t),this.initializeDatabase()}static getInstance(e){return c.instance||(c.instance=new c(e)),c.instance}initializeDatabase(){try{const e=a.default.join(process.cwd(),"database","schema.sql");if(!r.default.existsSync(e))throw new Error("Schema file not found");{const t=r.default.readFileSync(e,"utf8");this.db.exec(t),console.log("Database initialized successfully")}}catch(e){throw console.error("Failed to initialize database:",e),e}}createTeacher(e){const t=this.db.prepare("\n      INSERT INTO teachers (name, qualifications, working_times)\n      VALUES (?, ?, ?)\n    ").run(e.name,JSON.stringify(e.qualifications),JSON.stringify(e.working_times));return this.getTeacher(t.lastInsertRowid)}getTeacher(e){const t=this.db.prepare("SELECT * FROM teachers WHERE id = ?").get(e);return t?{id:t.id,name:t.name,qualifications:JSON.parse(t.qualifications),working_times:JSON.parse(t.working_times||"{}"),created_at:t.created_at}:null}getAllTeachers(){return this.db.prepare("SELECT * FROM teachers ORDER BY name").all().map(e=>({id:e.id,name:e.name,qualifications:JSON.parse(e.qualifications),working_times:JSON.parse(e.working_times||"{}"),created_at:e.created_at}))}updateTeacher(e,t){const i=this.getTeacher(e);return i?(this.db.prepare("\n      UPDATE teachers \n      SET name = ?, qualifications = ?, working_times = ?\n      WHERE id = ?\n    ").run(t.name??i.name,JSON.stringify(t.qualifications??i.qualifications),JSON.stringify(t.working_times??i.working_times),e),this.getTeacher(e)):null}deleteTeacher(e){return this.db.prepare("DELETE FROM teachers WHERE id = ?").run(e).changes>0}createCourse(e){const t=this.db.prepare("\n      INSERT INTO courses (topic, lessons_count, lesson_duration, start_date, end_date)\n      VALUES (?, ?, ?, ?, ?)\n    ").run(e.topic,e.lessons_count,e.lesson_duration,e.start_date,e.end_date);return this.getCourse(t.lastInsertRowid)}getCourse(e){const t=this.db.prepare("SELECT * FROM courses WHERE id = ?").get(e);return t?{id:t.id,topic:t.topic,lessons_count:t.lessons_count,lesson_duration:t.lesson_duration,start_date:t.start_date,end_date:t.end_date,created_at:t.created_at}:null}getAllCourses(){return this.db.prepare("SELECT * FROM courses ORDER BY start_date").all().map(e=>({id:e.id,topic:e.topic,lessons_count:e.lessons_count,lesson_duration:e.lesson_duration,start_date:e.start_date,end_date:e.end_date,created_at:e.created_at}))}updateCourse(e,t){const i=this.getCourse(e);return i?(this.db.prepare("\n      UPDATE courses \n      SET topic = ?, lessons_count = ?, lesson_duration = ?, start_date = ?, end_date = ?\n      WHERE id = ?\n    ").run(t.topic??i.topic,t.lessons_count??i.lessons_count,t.lesson_duration??i.lesson_duration,t.start_date??i.start_date,t.end_date??i.end_date,e),this.getCourse(e)):null}deleteCourse(e){return this.db.prepare("DELETE FROM courses WHERE id = ?").run(e).changes>0}createAssignment(e){const t=this.db.prepare("\n      INSERT INTO assignments (teacher_id, course_id, scheduled_slots, status, ai_rationale)\n      VALUES (?, ?, ?, ?, ?)\n    ").run(e.teacher_id,e.course_id,JSON.stringify(e.scheduled_slots||[]),e.status||"active",e.ai_rationale||null);return this.getAssignment(t.lastInsertRowid)}getAssignment(e){const t=this.db.prepare("\n      SELECT a.*, t.name as teacher_name, c.topic as course_topic\n      FROM assignments a\n      LEFT JOIN teachers t ON a.teacher_id = t.id\n      LEFT JOIN courses c ON a.course_id = c.id\n      WHERE a.id = ?\n    ").get(e);return t?{id:t.id,teacher_id:t.teacher_id,course_id:t.course_id,scheduled_slots:JSON.parse(t.scheduled_slots||"[]"),status:t.status,ai_rationale:t.ai_rationale,created_at:t.created_at}:null}getAllAssignments(){return this.db.prepare("\n      SELECT a.*, t.name as teacher_name, c.topic as course_topic\n      FROM assignments a\n      LEFT JOIN teachers t ON a.teacher_id = t.id\n      LEFT JOIN courses c ON a.course_id = c.id\n      ORDER BY a.created_at DESC\n    ").all().map(e=>({id:e.id,teacher_id:e.teacher_id,course_id:e.course_id,scheduled_slots:JSON.parse(e.scheduled_slots||"[]"),status:e.status,ai_rationale:e.ai_rationale,created_at:e.created_at}))}updateAssignment(e,t){const i=this.getAssignment(e);return i?(this.db.prepare("\n      UPDATE assignments \n      SET teacher_id = ?, course_id = ?, scheduled_slots = ?, status = ?, ai_rationale = ?\n      WHERE id = ?\n    ").run(t.teacher_id??i.teacher_id,t.course_id??i.course_id,JSON.stringify(t.scheduled_slots??i.scheduled_slots),t.status??i.status,t.ai_rationale??i.ai_rationale,e),this.getAssignment(e)):null}deleteAssignment(e){return this.db.prepare("DELETE FROM assignments WHERE id = ?").run(e).changes>0}getSetting(e){const t=this.db.prepare("SELECT value FROM app_settings WHERE key = ?").get(e);return t?t.value:null}setSetting(e,t){this.db.prepare("\n      INSERT OR REPLACE INTO app_settings (key, value)\n      VALUES (?, ?)\n    ").run(e,t)}getAllSettings(){const e=this.db.prepare("SELECT key, value FROM app_settings").all(),t={};return e.forEach(e=>{t[e.key]=e.value}),t}execute(e,t){const i=this.db.prepare(e);return t?i.run(...t):i.run()}close(){this.db&&this.db.close()}createWeightingSettings(e){const t=this.db.prepare("\n      INSERT INTO weighting_settings (profile_name, equality_weight, continuity_weight, loyalty_weight, is_default)\n      VALUES (?, ?, ?, ?, ?)\n    ").run(e.profile_name,e.equality_weight,e.continuity_weight,e.loyalty_weight,e.is_default?1:0);return this.getWeightingSettings(t.lastInsertRowid)}getWeightingSettings(e){const t=this.db.prepare("SELECT * FROM weighting_settings WHERE id = ?").get(e);return t?{id:t.id,profile_name:t.profile_name,equality_weight:t.equality_weight,continuity_weight:t.continuity_weight,loyalty_weight:t.loyalty_weight,is_default:1===t.is_default,created_at:t.created_at}:null}getDefaultWeightingSettings(){const e=this.db.prepare("SELECT * FROM weighting_settings WHERE is_default = 1").get();return e?{id:e.id,profile_name:e.profile_name,equality_weight:e.equality_weight,continuity_weight:e.continuity_weight,loyalty_weight:e.loyalty_weight,is_default:!0,created_at:e.created_at}:null}getAllWeightingSettings(){return this.db.prepare("SELECT * FROM weighting_settings ORDER BY is_default DESC, profile_name").all().map(e=>({id:e.id,profile_name:e.profile_name,equality_weight:e.equality_weight,continuity_weight:e.continuity_weight,loyalty_weight:e.loyalty_weight,is_default:1===e.is_default,created_at:e.created_at}))}updateWeightingSettings(e,t){const i=this.getWeightingSettings(e);return i?(this.db.prepare("\n      UPDATE weighting_settings \n      SET profile_name = ?, equality_weight = ?, continuity_weight = ?, loyalty_weight = ?, is_default = ?\n      WHERE id = ?\n    ").run(t.profile_name??i.profile_name,t.equality_weight??i.equality_weight,t.continuity_weight??i.continuity_weight,t.loyalty_weight??i.loyalty_weight,t.is_default??i.is_default?1:0,e),this.getWeightingSettings(e)):null}deleteWeightingSettings(e){return this.db.prepare("DELETE FROM weighting_settings WHERE id = ?").run(e).changes>0}saveChatMessage(e){const t=this.db.prepare("\n      INSERT INTO chat_history (conversation_id, message_type, message_content, context_data)\n      VALUES (?, ?, ?, ?)\n    ").run(e.conversation_id,e.message_type,e.message_content,e.context_data||null);return this.getChatMessage(t.lastInsertRowid)}getChatMessage(e){const t=this.db.prepare("SELECT * FROM chat_history WHERE id = ?").get(e);return t?{id:t.id,conversation_id:t.conversation_id,message_type:t.message_type,message_content:t.message_content,context_data:t.context_data,timestamp:t.timestamp}:null}getChatMessages(e){return this.db.prepare("\n      SELECT * FROM chat_history \n      WHERE conversation_id = ? \n      ORDER BY timestamp ASC\n    ").all(e).map(e=>({id:e.id,conversation_id:e.conversation_id,message_type:e.message_type,message_content:e.message_content,context_data:e.context_data,timestamp:e.timestamp}))}saveChatConversation(e){this.db.prepare("\n      INSERT OR REPLACE INTO chat_conversations (id, title, context_snapshot)\n      VALUES (?, ?, ?)\n    ").run(e.id,e.title,JSON.stringify(e.context))}getAllChatConversations(){return this.db.prepare("\n      SELECT * FROM chat_conversations \n      ORDER BY updated_at DESC\n    ").all().map(e=>({id:e.id,title:e.title,messages:this.getChatMessages(e.id),context:JSON.parse(e.context_snapshot||"{}"),created_at:e.created_at,updated_at:e.updated_at}))}deleteChatConversation(e){const t=this.db.prepare("DELETE FROM chat_history WHERE conversation_id = ?"),i=this.db.prepare("DELETE FROM chat_conversations WHERE id = ?"),s=this.db.transaction(()=>{t.run(e),i.run(e)});try{return s(),!0}catch(e){return console.error("Failed to delete conversation:",e),!1}}getStats(){const e=this.db.prepare("SELECT COUNT(*) as count FROM teachers").get(),t=this.db.prepare("SELECT COUNT(*) as count FROM courses").get(),i=this.db.prepare("SELECT COUNT(*) as count FROM assignments").get(),s=this.db.prepare("SELECT COUNT(*) as count FROM weighting_settings").get(),n=this.db.prepare("SELECT COUNT(*) as count FROM chat_conversations").get(),a=this.db.prepare("SELECT COUNT(*) as count FROM chat_history").get();return{teachers:e.count,courses:t.count,assignments:i.count,weighting_profiles:s.count,chat_conversations:n.count,chat_messages:a.count}}}t.DatabaseService=c},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},t={};!function i(s){var n=t[s];if(void 0!==n)return n.exports;var a=t[s]={exports:{}};return e[s].call(a.exports,a,a.exports,i),a.exports}(238)})();